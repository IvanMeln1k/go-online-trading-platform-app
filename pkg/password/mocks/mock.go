// Code generated by MockGen. DO NOT EDIT.
// Source: password.go

// Package mock_password is a generated GoMock package.
package mock_password

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPasswordManagerI is a mock of PasswordManagerI interface.
type MockPasswordManagerI struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordManagerIMockRecorder
}

// MockPasswordManagerIMockRecorder is the mock recorder for MockPasswordManagerI.
type MockPasswordManagerIMockRecorder struct {
	mock *MockPasswordManagerI
}

// NewMockPasswordManagerI creates a new mock instance.
func NewMockPasswordManagerI(ctrl *gomock.Controller) *MockPasswordManagerI {
	mock := &MockPasswordManagerI{ctrl: ctrl}
	mock.recorder = &MockPasswordManagerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordManagerI) EXPECT() *MockPasswordManagerIMockRecorder {
	return m.recorder
}

// CheckPassword mocks base method.
func (m *MockPasswordManagerI) CheckPassword(password, hashedPassword string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", password, hashedPassword)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockPasswordManagerIMockRecorder) CheckPassword(password, hashedPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockPasswordManagerI)(nil).CheckPassword), password, hashedPassword)
}

// HashPassword mocks base method.
func (m *MockPasswordManagerI) HashPassword(password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	return ret0
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockPasswordManagerIMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockPasswordManagerI)(nil).HashPassword), password)
}
