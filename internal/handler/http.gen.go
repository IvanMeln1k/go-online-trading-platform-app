// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Card defines model for Card.
type Card struct {
	Cvv    string `json:"cvv"`
	Data   string `json:"data"`
	Id     int    `json:"id"`
	Number string `json:"number"`
	UserId int    `json:"userId"`
}

// Filter defines model for Filter.
type Filter struct {
	Article      *string  `json:"article,omitempty"`
	Limit        *int     `json:"limit,omitempty"`
	Manufacturer *string  `json:"manufacturer,omitempty"`
	MaxPrice     *int     `json:"maxPrice,omitempty"`
	MinPrice     *int     `json:"minPrice,omitempty"`
	Name         *string  `json:"name,omitempty"`
	Offset       *int     `json:"offset,omitempty"`
	Rating       *float32 `json:"rating,omitempty"`
}

// Message defines model for Message.
type Message struct {
	Message string `json:"message"`
}

// Product defines model for Product.
type Product struct {
	Article      string  `json:"article"`
	Deleted      bool    `json:"deleted"`
	Id           int     `json:"id"`
	Manufacturer string  `json:"manufacturer"`
	Name         string  `json:"name"`
	Price        int     `json:"price"`
	Rating       float32 `json:"rating"`
	SellerId     int     `json:"sellerId"`
}

// GetAllProductsParams defines parameters for GetAllProducts.
type GetAllProductsParams struct {
	Params Filter `form:"params" json:"params"`
}

// LogoutParams defines parameters for Logout.
type LogoutParams struct {
	RefreshToken struct {
		RefreshToken string `json:"refreshToken"`
	} `form:"refreshToken" json:"refreshToken"`
}

// LogoutAllParams defines parameters for LogoutAll.
type LogoutAllParams struct {
	RefreshToken struct {
		RefreshToken string `json:"refreshToken"`
	} `form:"refreshToken" json:"refreshToken"`
}

// RefreshParams defines parameters for Refresh.
type RefreshParams struct {
	RefreshToken struct {
		RefreshToken string `json:"refreshToken"`
	} `form:"refreshToken" json:"refreshToken"`
}

// SignInJSONBody defines parameters for SignIn.
type SignInJSONBody struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// SignUpJSONBody defines parameters for SignUp.
type SignUpJSONBody struct {
	Email         openapi_types.Email `json:"email"`
	EmailVerified bool                `json:"emailVerified"`
	Name          string              `json:"name"`
	Password      string              `json:"password"`
	Username      string              `json:"username"`
}

// VerificationParams defines parameters for Verification.
type VerificationParams struct {
	Token *string `form:"token,omitempty" json:"token,omitempty"`
}

// AddCardJSONRequestBody defines body for AddCard for application/json ContentType.
type AddCardJSONRequestBody = Card

// AddProductJSONRequestBody defines body for AddProduct for application/json ContentType.
type AddProductJSONRequestBody = Product

// SignInJSONRequestBody defines body for SignIn for application/json ContentType.
type SignInJSONRequestBody SignInJSONBody

// SignUpJSONRequestBody defines body for SignUp for application/json ContentType.
type SignUpJSONRequestBody SignUpJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/user/cards)
	GetAllCards(ctx echo.Context) error

	// (POST /api/user/cards)
	AddCard(ctx echo.Context) error

	// (DELETE /api/user/cards/{cardId})
	DeleteCard(ctx echo.Context, cardId int) error

	// (GET /api/user/cards/{cardId})
	GetTheCard(ctx echo.Context, cardId int) error

	// (GET /api/user/products)
	GetMyAllProducts(ctx echo.Context) error

	// (POST /api/user/products)
	AddProduct(ctx echo.Context) error

	// (DELETE /api/user/products/{productId})
	DeleteProduct(ctx echo.Context, productId int) error

	// (GET /api/user/products/{productId})
	GetTheProduct(ctx echo.Context, productId int) error

	// (GET /api/user/search)
	GetAllProducts(ctx echo.Context, params GetAllProductsParams) error

	// (DELETE /auth//logout)
	Logout(ctx echo.Context, params LogoutParams) error

	// (GET /auth/get-user)
	GetUser(ctx echo.Context) error

	// (DELETE /auth/logout-all)
	LogoutAll(ctx echo.Context, params LogoutAllParams) error

	// (POST /auth/refresh)
	Refresh(ctx echo.Context, params RefreshParams) error

	// (GET /auth/resend-email)
	ResendEmail(ctx echo.Context) error

	// (POST /auth/sign-in)
	SignIn(ctx echo.Context) error

	// (POST /auth/sign-up)
	SignUp(ctx echo.Context) error

	// (GET /auth/verification)
	Verification(ctx echo.Context, params VerificationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllCards converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllCards(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllCards(ctx)
	return err
}

// AddCard converts echo context to params.
func (w *ServerInterfaceWrapper) AddCard(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddCard(ctx)
	return err
}

// DeleteCard converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cardId" -------------
	var cardId int

	err = runtime.BindStyledParameterWithOptions("simple", "cardId", ctx.Param("cardId"), &cardId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cardId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCard(ctx, cardId)
	return err
}

// GetTheCard converts echo context to params.
func (w *ServerInterfaceWrapper) GetTheCard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cardId" -------------
	var cardId int

	err = runtime.BindStyledParameterWithOptions("simple", "cardId", ctx.Param("cardId"), &cardId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cardId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTheCard(ctx, cardId)
	return err
}

// GetMyAllProducts converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyAllProducts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyAllProducts(ctx)
	return err
}

// AddProduct converts echo context to params.
func (w *ServerInterfaceWrapper) AddProduct(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddProduct(ctx)
	return err
}

// DeleteProduct converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId int

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProduct(ctx, productId)
	return err
}

// GetTheProduct converts echo context to params.
func (w *ServerInterfaceWrapper) GetTheProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId int

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTheProduct(ctx, productId)
	return err
}

// GetAllProducts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllProducts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllProductsParams
	// ------------- Required query parameter "params" -------------

	err = runtime.BindQueryParameter("form", true, true, "params", ctx.QueryParams(), &params.Params)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter params: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllProducts(ctx, params)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LogoutParams

	if cookie, err := ctx.Cookie("refreshToken"); err == nil {

		var value struct {
			RefreshToken string `json:"refreshToken"`
		}
		err = runtime.BindStyledParameterWithOptions("simple", "refreshToken", cookie.Value, &value, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationCookie, Explode: true, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refreshToken: %s", err))
		}
		params.RefreshToken = value

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument refreshToken is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx, params)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx)
	return err
}

// LogoutAll converts echo context to params.
func (w *ServerInterfaceWrapper) LogoutAll(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LogoutAllParams

	if cookie, err := ctx.Cookie("refreshToken"); err == nil {

		var value struct {
			RefreshToken string `json:"refreshToken"`
		}
		err = runtime.BindStyledParameterWithOptions("simple", "refreshToken", cookie.Value, &value, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationCookie, Explode: true, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refreshToken: %s", err))
		}
		params.RefreshToken = value

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument refreshToken is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LogoutAll(ctx, params)
	return err
}

// Refresh converts echo context to params.
func (w *ServerInterfaceWrapper) Refresh(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RefreshParams

	if cookie, err := ctx.Cookie("refreshToken"); err == nil {

		var value struct {
			RefreshToken string `json:"refreshToken"`
		}
		err = runtime.BindStyledParameterWithOptions("simple", "refreshToken", cookie.Value, &value, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationCookie, Explode: true, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refreshToken: %s", err))
		}
		params.RefreshToken = value

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument refreshToken is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Refresh(ctx, params)
	return err
}

// ResendEmail converts echo context to params.
func (w *ServerInterfaceWrapper) ResendEmail(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResendEmail(ctx)
	return err
}

// SignIn converts echo context to params.
func (w *ServerInterfaceWrapper) SignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignIn(ctx)
	return err
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// Verification converts echo context to params.
func (w *ServerInterfaceWrapper) Verification(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerificationParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Verification(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/user/cards", wrapper.GetAllCards)
	router.POST(baseURL+"/api/user/cards", wrapper.AddCard)
	router.DELETE(baseURL+"/api/user/cards/:cardId", wrapper.DeleteCard)
	router.GET(baseURL+"/api/user/cards/:cardId", wrapper.GetTheCard)
	router.GET(baseURL+"/api/user/products", wrapper.GetMyAllProducts)
	router.POST(baseURL+"/api/user/products", wrapper.AddProduct)
	router.DELETE(baseURL+"/api/user/products/:productId", wrapper.DeleteProduct)
	router.GET(baseURL+"/api/user/products/:productId", wrapper.GetTheProduct)
	router.GET(baseURL+"/api/user/search", wrapper.GetAllProducts)
	router.DELETE(baseURL+"/auth//logout", wrapper.Logout)
	router.GET(baseURL+"/auth/get-user", wrapper.GetUser)
	router.DELETE(baseURL+"/auth/logout-all", wrapper.LogoutAll)
	router.POST(baseURL+"/auth/refresh", wrapper.Refresh)
	router.GET(baseURL+"/auth/resend-email", wrapper.ResendEmail)
	router.POST(baseURL+"/auth/sign-in", wrapper.SignIn)
	router.POST(baseURL+"/auth/sign-up", wrapper.SignUp)
	router.GET(baseURL+"/auth/verification", wrapper.Verification)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xa32/bthP/VwR+v8Be5MrdMmBzsQc327oAK2o0TV6GPDDS2WZLkSxJefEM/+8Df0iW",
	"LUqxYzdxFj/ZII/H493nPncmvUApzwVnwLRCgwVS6RRybL+eY5mZTyG5AKkJ2NF0NjMfei4ADZDSkrAJ",
	"WsYowxoHJ0hWGyZMwwSkGWdFfgsyuKRQIC+Cy5YxkvC1IBIyNPjL6K4UeRNia2Gl4yYudfDbz5Bqo/53",
	"QrXbef1oWGqSUgiaRElOdPggOWbFGKe6kC3HyfHdSJIUWpYT1jHLcB42iI/HClosklgbqdWcd5FxX8Mb",
	"70EpPIGmO/LVxMbuG1EoBUO+HkmeFanezdkZUNBQB8At5xQw68LTvWFodaVod3+rJ2OkgNJdYFoe2BtS",
	"brtheE3vyg+VHU0Pm60IG3NjRQYqlURowhkaoA+MEgY9LXFG2KQnKNZjLnMUI020cXybxHB0gWI0A6mc",
	"otev+q/6FnICGBYEDdAPdihGAuupjWaCBUlMyiUplpkdmjh0rhv1DnSEKY2clFVpjsaZ8aOZHVJ67uck",
	"KMGZcnD5vt+37MOZBmYVYyEoSe3i5LMy2kv2CpBWaRTRkNsv/5cwRgP0v2RFf4nnvsQS3ypVsJR4Hsqd",
	"pYVq/XiXRZqCUmbxWf9sJ4O7DCpTNLDjlQIZMa6jMS+YtfrHHT31wI0vmAbJMI0UyBnICKTknmHwRBnU",
	"WzfemPziKgCFYZZZGDRQMMyyczducgiUfsuz+cGO5IK7dCl6UIBtRQVe8GZXMD1KTK8xJZnVWYbz+OC0",
	"jDfJJlk4py4dxgxlNtH2qx23gItu5xFpws5JeOQJLHEOGqTZeoGIUWHIrmTvQRnIenS1LCCuuaIBhZs9",
	"MfdA39aAdHzk0Fom9LQzXO9Af5o+33CVNPT0FcRYctwVZC3lhWso728xKsEAct7Ph5SOVgIHrAR1+7bq",
	"NsoO+dRw7AuX0pPdPYcPUKjtGFVT36LzqAJ96ObDn2ir/mMle2pB9gBYkJKSReXdbXoRL9zZjqwQeX+J",
	"W4X21JTsTyCdfUl36Fxr8sxDV2Orpy863pijrztrtKAAy3S6V5+y3qWEcPS1ADmvAcmIqE4UdbnB34zu",
	"j6yX1RM9K3gWepoklE94obcoUgbJ36lIgbK3gZsY/dPpCWMz5fwLgRU4JYwlqOkn/gVYJ0TX0bO27N7L",
	"6DXpQI/z9OXurP/6URp1ZkLNJfkHjguPHjM1OE5A9wzQOrnSCgQ48sqNH5CuIMeEmi9jLnOs0cCPxM2n",
	"AztxDZKMSdt7Reuzg+Qtzx/mpC2rNsBeSVaPCqWl64b5zXZs+Y8GMTbENbw49uphSrdgMFNjt2KxIaUn",
	"IjsR2T5E5mNmQx+8gPjoBCJtotps+fz0S4LhxquwBVebafE+tsdryne+/XjZUPdOqyNdAct6VakMlu2P",
	"Viia2TKU+lsdX6A2gW8kf/Nzp/sI53Xnj5rXFZmwHmHt/HLpBMLNkpm8YHvcbj64TRJYqb+5zO5P2VJF",
	"tSKUqMv/PufEaAo4s/S/QJege+eO/I3f73Au7B84FM+h5zfs2ZLyJhphPf0leRP9obX4wOi8GY7l493m",
	"vsVZ5MH2iCx6wWaYkiwqu+OkBFPEZXS0FLvZ5NpcL0R3rkeFaM/1K/EUub7PT6IOnjjMz6Jqg007vz3N",
	"uP+tVf4rCntz3DzIET7KNNL458fY1Va/5MrHMsJUAs7mkatuR5269YantTmy0Ju39EPXdQ1b3fxqX3Aa",
	"zwUVtF7MD0ZbbSOiIrgThhIS4guCof+15+ujLghV92f/bGqEXPQLSdEATbUWgyShPMV0ypUe/NTv99Hy",
	"ZvlvAAAA//8+3VKs0i0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
