// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Card defines model for Card.
type Card struct {
	Cvv    string `json:"cvv"`
	Data   string `json:"data"`
	Id     int    `json:"id"`
	Number string `json:"number"`
	UserId int    `json:"userId"`
}

// Message defines model for Message.
type Message struct {
	Message string `json:"message"`
}

// LogoutParams defines parameters for Logout.
type LogoutParams struct {
	RefreshToken struct {
		RefreshToken string `json:"refreshToken"`
	} `form:"refreshToken" json:"refreshToken"`
}

// LogoutAllParams defines parameters for LogoutAll.
type LogoutAllParams struct {
	RefreshToken struct {
		RefreshToken string `json:"refreshToken"`
	} `form:"refreshToken" json:"refreshToken"`
}

// RefreshParams defines parameters for Refresh.
type RefreshParams struct {
	RefreshToken struct {
		RefreshToken string `json:"refreshToken"`
	} `form:"refreshToken" json:"refreshToken"`
}

// SignInJSONBody defines parameters for SignIn.
type SignInJSONBody struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// SignUpJSONBody defines parameters for SignUp.
type SignUpJSONBody struct {
	Email         openapi_types.Email `json:"email"`
	EmailVerified bool                `json:"emailVerified"`
	Name          string              `json:"name"`
	Password      string              `json:"password"`
	Username      string              `json:"username"`
}

// VerificationParams defines parameters for Verification.
type VerificationParams struct {
	Token *string `form:"token,omitempty" json:"token,omitempty"`
}

// AddCardJSONRequestBody defines body for AddCard for application/json ContentType.
type AddCardJSONRequestBody = Card

// SignInJSONRequestBody defines body for SignIn for application/json ContentType.
type SignInJSONRequestBody SignInJSONBody

// SignUpJSONRequestBody defines body for SignUp for application/json ContentType.
type SignUpJSONRequestBody SignUpJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/user/cards)
	GetAllCards(ctx echo.Context) error

	// (POST /api/user/cards)
	AddCard(ctx echo.Context) error

	// (DELETE /api/user/cards/{cardId})
	DeleteCard(ctx echo.Context, cardId int) error

	// (GET /api/user/cards/{cardId})
	GetTheCard(ctx echo.Context, cardId int) error

	// (DELETE /auth//logout)
	Logout(ctx echo.Context, params LogoutParams) error

	// (GET /auth/get-user)
	GetUser(ctx echo.Context) error

	// (DELETE /auth/logout-all)
	LogoutAll(ctx echo.Context, params LogoutAllParams) error

	// (POST /auth/refresh)
	Refresh(ctx echo.Context, params RefreshParams) error

	// (GET /auth/resend-email)
	ResendEmail(ctx echo.Context) error

	// (POST /auth/sign-in)
	SignIn(ctx echo.Context) error

	// (POST /auth/sign-up)
	SignUp(ctx echo.Context) error

	// (GET /auth/verification)
	Verification(ctx echo.Context, params VerificationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllCards converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllCards(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllCards(ctx)
	return err
}

// AddCard converts echo context to params.
func (w *ServerInterfaceWrapper) AddCard(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddCard(ctx)
	return err
}

// DeleteCard converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cardId" -------------
	var cardId int

	err = runtime.BindStyledParameterWithOptions("simple", "cardId", ctx.Param("cardId"), &cardId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cardId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCard(ctx, cardId)
	return err
}

// GetTheCard converts echo context to params.
func (w *ServerInterfaceWrapper) GetTheCard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cardId" -------------
	var cardId int

	err = runtime.BindStyledParameterWithOptions("simple", "cardId", ctx.Param("cardId"), &cardId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cardId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTheCard(ctx, cardId)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LogoutParams

	if cookie, err := ctx.Cookie("refreshToken"); err == nil {

		var value struct {
			RefreshToken string `json:"refreshToken"`
		}
		err = runtime.BindStyledParameterWithOptions("simple", "refreshToken", cookie.Value, &value, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationCookie, Explode: true, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refreshToken: %s", err))
		}
		params.RefreshToken = value

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument refreshToken is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx, params)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx)
	return err
}

// LogoutAll converts echo context to params.
func (w *ServerInterfaceWrapper) LogoutAll(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LogoutAllParams

	if cookie, err := ctx.Cookie("refreshToken"); err == nil {

		var value struct {
			RefreshToken string `json:"refreshToken"`
		}
		err = runtime.BindStyledParameterWithOptions("simple", "refreshToken", cookie.Value, &value, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationCookie, Explode: true, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refreshToken: %s", err))
		}
		params.RefreshToken = value

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument refreshToken is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LogoutAll(ctx, params)
	return err
}

// Refresh converts echo context to params.
func (w *ServerInterfaceWrapper) Refresh(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RefreshParams

	if cookie, err := ctx.Cookie("refreshToken"); err == nil {

		var value struct {
			RefreshToken string `json:"refreshToken"`
		}
		err = runtime.BindStyledParameterWithOptions("simple", "refreshToken", cookie.Value, &value, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationCookie, Explode: true, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refreshToken: %s", err))
		}
		params.RefreshToken = value

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument refreshToken is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Refresh(ctx, params)
	return err
}

// ResendEmail converts echo context to params.
func (w *ServerInterfaceWrapper) ResendEmail(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResendEmail(ctx)
	return err
}

// SignIn converts echo context to params.
func (w *ServerInterfaceWrapper) SignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignIn(ctx)
	return err
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// Verification converts echo context to params.
func (w *ServerInterfaceWrapper) Verification(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerificationParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Verification(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/user/cards", wrapper.GetAllCards)
	router.POST(baseURL+"/api/user/cards", wrapper.AddCard)
	router.DELETE(baseURL+"/api/user/cards/:cardId", wrapper.DeleteCard)
	router.GET(baseURL+"/api/user/cards/:cardId", wrapper.GetTheCard)
	router.DELETE(baseURL+"/auth//logout", wrapper.Logout)
	router.GET(baseURL+"/auth/get-user", wrapper.GetUser)
	router.DELETE(baseURL+"/auth/logout-all", wrapper.LogoutAll)
	router.POST(baseURL+"/auth/refresh", wrapper.Refresh)
	router.GET(baseURL+"/auth/resend-email", wrapper.ResendEmail)
	router.POST(baseURL+"/auth/sign-in", wrapper.SignIn)
	router.POST(baseURL+"/auth/sign-up", wrapper.SignUp)
	router.GET(baseURL+"/auth/verification", wrapper.Verification)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZX2/bNhD/KgQ3YC9y5W4ZsKnYQ5oNXYANLZomL0MeGOlssaVIljx59Qx994F/rMiW",
	"7MX543hNniyQp+Px7ne/u5MXNFeVVhIkWpotqM1LqJh/PGGmcL/aKA0GOfjVfDZzPzjXQDNq0XA5pU1C",
	"C4ZscIMXnWUuEaZg3Lqsqyswg6/UFszp4GtNQg18rrmBgmZ/Od2tomhC4i1sdVwmSx3q6iPk6NT/Cday",
	"KfTvVl1vrNm0du5SsK/dSXI5UU5HATY3XCNXkmb0rRRcwggNK7icjrRgOFGmoglFjgI2Sxy/O6UJnYGx",
	"QdHLF+MXY3cPpUEyzWlGf/BLCdUMS3+TlGmeOhekOTOFX5oC9o16A0iYECRIeZWGuT3nfrd7LMRJ3DNg",
	"tZI2uOr78dijQUkE6RUzrQXP/cvpR+u0L9E0AKKlURyh8g/fGpjQjH6TXsMxjVhMPRCb1tXMGDb3IRnw",
	"/er1zuo8B2vdy0fjo50M3mbQEkADJ55bMEQqJBNVS2/1jzt66pYHn0oEI5kgFswMDAFjVEgYZFPrQOvd",
	"eNkkVCs7AIXjovAw6KHguChOwrpLAbD4WhXze7tSCG4TMuxeAXYjBomCl7uCaS8xvWCCF17nMpyHB6cm",
	"WSebdBGc2gSMCUDoo+1Xv+4BR67mhPdhFyQi8jQzrAIE445eUO5UOLJz9M8qF7cYyG500dSQdFzRg8Ll",
	"HTF3S992gHR45LCxTGC5NVxvAD+U/99wLWno8SuIs+SwK4hP+RrLNBVqqmq8QZ47dvjOEgvWNzHr4Pkj",
	"6BkGTq7UJw7X0DEwMWDLD+oTyK0AWi0JK6/9Z4e3Ij1QHR6fOo7GL/fS0EgXamX4P3BYYIyY6cBxCjhy",
	"QNva7XqBAfI6D+v32INAxbhwD66JZ0izuJL0Bx6/cQGGTzh0u5YrpQQw6cclD/6BYUkza/9WphjcNErA",
	"xhFrg8q1TGglow1Je4325PULxHN3bKoOBlkeCh1cBZYbMSFuwHRumroR2x0L8Ux4z4R3F8KLMfOhH5zp",
	"3gcBgi6q/fk+bj8lGK7axjy4NpmW3MX2ZEX5zvPl04Z6dFoX6RZkMWpL6mB5f++FyMyXoTzOzbFWrQPf",
	"Sf4W955nwOD14I+O1y2fyhGXm/nlLAgMN1Vu81Te4bPRrdupLS3RWsr2WpmhRG2+fs5JaAms8PS/oGeA",
	"o5NA/s7vX1il/fdpqyoYxQNHvqS8Iu8Ylr+kr8jviPqtFPN+OJr9fS97zQoSwbZHFj2VMyZ4QZaNcroE",
	"E1GGHCzFrje5PtdrvT3XSa035/q5foxcf7DR6UEnpIenmfC3W+u/uvbf7PoXOcDP3r00/nkfp/rql57H",
	"WBImDLBiTkJ1O+jU7TY8G5sjD735hn7ooqtheBr4XIOZXw8DGAtO73NtC60nMzD6aku4JfBFO0pIeSwI",
	"jv5X/g486ILQdn9NQoNQiH5tBM1oiaizNBUqZ6JUFrOfxuMxbS6bfwMAAP//1tOVA0EgAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
